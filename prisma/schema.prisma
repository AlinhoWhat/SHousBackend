// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  username String @unique
  password String
  isAdmin Boolean @default(false)
  avatar String?
  createdAt DateTime @default(now())
  posts Post[]
  reviews Review[] // Un utilisateur peut laisser plusieurs avis
  chatIDs String[] @db.ObjectId

  //
  chats Chat[] @relation(fields: [chatIDs], references: [id])

}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  price Int
  images String[]
  desc String
  address String
  city String
  bedroom Int
  bathroom Int
  latitude Float?
  longitude Float?
  type Type
  property Property
  userId String @db.ObjectId
  reviews Review[] // Un post peut avoir plusieurs avis
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])


}


model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  rating Int @default(0) // Note de 1 Ã  5
  comment String?
  userId String @db.ObjectId
  postId String @db.ObjectId
  createdAt DateTime @default(now())

    // Relations
  user User @relation(fields: [userId], references: [id])
  post  Post @relation(fields: [postId], references: [id])
}


model Chat{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userIDs String[] @db.ObjectId
  seenBy String[] @db.ObjectId
  createdAt DateTime @default(now())
  messages Message[]
  lastMessage String?

  // Relations
  users User[] @relation(fields: [userIDs], references: [id])

}

model Message{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  chatId String @db.ObjectId
  senderId String
  text String
  createdAt DateTime @default(now())

  // Relations
  chat Chat @relation(fields: [chatId], references: [id])
}


enum Type {
  BUY
  RENT
}

enum Property {
  APARTMENT
  HOUSE
  VILLA
  NO_FURNITURE
  FURNITURE
  DUPLEX
  STUDIO
  S_1
  S_2
  S_3
  All
  
}